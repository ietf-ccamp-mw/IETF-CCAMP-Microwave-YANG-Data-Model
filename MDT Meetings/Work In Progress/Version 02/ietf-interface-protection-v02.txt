module: ietf-interface-protection
    +--rw protection-groups
      +--rw protection-group* [name]
         +--rw name                             string
         +--rw protection-architecture-type?    identityref
				 +--rw working-entities* [signal-id]
				 |  +--rw signal-id                     uint8
				 |  +--rw working-entity                if:interface-ref
         +--rw protection-members*              if:interface-ref
         +--rw protection-operation-type?       enumeration
         +--rw revertive-wait-to-restore?       uint16
		     +--rw hold-off-timer                   uint16
         +--ro protection-status?               identityref
         +---x protection-external-commands
            +---w input
               +---w protection-external-command?   identityref


module ietf-interface-protection {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-interface-protection";
  prefix ifprot;

  import ietf-yang-types {
    prefix yang;
  }
    
  import ietf-interfaces {
    prefix if;
  }

  import iana-if-type {
    prefix ianaift;
  }

  organization
    "IETF CCAMP Working Group";
  contact
    "jonas.ahlberg@ericsson.com
     amy.yemin@huawei.com
     Xi.Li@neclab.eu
     cjbc@it.uc3m.es
     k-kawada@ah.jp.nec.com";
     
  description
    "This is a module for the entities in
    a generic interface protection mechanism.";

  revision 2017-08-11 {
    description
    "Draft revision.";
    reference "";
  }

  /*
   * Protection architecture type identities
  */
  identity protection-architecture-type {
    description
      "protection architecture type";
  }

  identity one-to-one-type {
    base protection-architecture-type;
    description
      "1+1, One interface protects
      another one interface.";
  }

  identity one-for-n-type {
    base protection-architecture-type;
    description
      "1:N, One interface protects
      n other interfaces.";
  }  
  
  /*
   * Protection states identities
   */
  
  identity protection-states {
    description
     "Identities describing the status of the protection,
     in a group of interfaces configured in 
     a protection mode.";
  }

  identity unprotected {
    base protection-states;
    description "Not protected";
  }  

  identity protected {
    base protection-states;
    description "Protected";
  }  

  identity unable-to-protect {
    base protection-states;
    description "Unable to protect";
  }  

  /*
   * protection-external-commands identities
   */
  
  identity protection-external-commands{
    description
      "Protection external commands for trouble shooting
       purpose.";
  }

  identity manual-switch-working{
    base protection-external-commands;
    description
      "A switch action initiated by an operator command.
       It switches normal traffic signal to the working 
       transport entity.";
  }
  
  identity manual-switch-protection{
    base protection-external-commands;
    description
      "A switch action initiated by an operator command.
       It switches normal traffic signal to the protection 
       transport entity.";
  }
  
  identity forced-switch{
    base protection-external-commands;
    description
      "A switch action initiated by an operator command. 
       It switches normal traffic signal to the protection
       transport entity and forces it to remain on that 
       entity even when criteria for switching back to 
       the orignal entity are fulfilled.";
  }

  identity lockout-of-protection{
    base protection-external-commands;
    description
      "A switch action temporarily disables access to the 
       protection transport entity for all signals.";
  }
  
    identity freeze{
    base protection-external-commands;
    description
      "A switch action temporarily prevents any switch action 
       to be taken and, as such, freezes the current state. 
       Until the freeze is cleared, additional near-end external 
       commands are rejected and fault condition changes and 
       received APS messages are ignored..";
  }

    identity exercise{
    base protection-external-commands;
    description
      "A switch action to test if the APS communication is 
       operating correctly. It is lower priority than any "real" 
       switch request..";
  }
  
    identity clear{
    base protection-external-commands;
    description
      "A action clears all switch commands.";
  }

  /*
   * Protection Common Configuration
   */

	grouping protection-common-config {
		description
			"Common attributes for protectiong group configuration.";
		
    leaf protection-operation-type {
      type enumeration {
        enum "non-revertive" {
          description
            "In non revertive operation, the traffic
            does not return to the working entity if the 
            switch requests are terminated.";
        }
        enum "revertive" {
          description
            "In revertive operation, the traffic always 
            returns to (or remains on) the working 
            entity if the switch requests are terminated.";
        }
      }
      default "non-revertive";
      description 
        "The type of protection operation, i.e. revertive
        or non-revertive operation.";
    }

		leaf revertive-wait-to-restore {
			when "../protection-operation-type = 'revertive'";
			type uint16;
			units "minutes";
			default "10";
			description
				"The time to wait before switching back to the
				working entity if 
				protection-operation-type is revertive.";
		}

		leaf hold-off-timer {
			type uint16;
			units "milliseconds";
			default "0";
			description
				"Time interval after the detection of a fault and its 
				confirmation as a condition requiring the protection 
				switching procedure.";
		}
	}

	/*
	 * Protection external commands
	 */
	grouping protection-external-commands {
		action protection-external-commands {
			input {
				leaf protection-external-command {
					type identityref {
						base protection-external-commands;
					}  
				description
					"Execution of protection external commands for
					trouble shooting purpose.";
				}
			}
		}
	}

  /*
   * Protection Groups
   */
   
  container protection-groups {
    description
      "Configuration of protected groups.";

    list protection-group {
      key "name";
      description
      "List of protected groups of interfaces.";
    
      leaf name {
        type string;
        description
          "Name used for identification of the protection group";
      }

      leaf protection-architecture-type {
        type identityref{
          base protection-architecture-type;
        }
        default "one-to-one-type";
        description
          "The type of protection architecture used,
          e.g. one interface protecting one or
          several other interfaces.";
      }

			list working-entities  {
				key "signal-id";
        min-elements 1;
				description
					"List of the interfaces over which the traffic
					normally should be transported over when there
					is no need to use the protecting interface.";

				leaf signal-id {
					type uint8
				}
				leaf working-entity  {
					when "../../protection-operation-type = 'revertive'";
					type if:interface-ref;
				description
					"The reference to the interface.";
				}
			}
    
			uses protection-common-config;
    
      leaf-list protection-members {
        type if:interface-ref;
        min-elements 2;
        description
          "Association to a group of interfaces
           configured for protection.";
      }
      
      leaf protection-status {
        type identityref {
          base protection-states;
        }
        config false;
        description
          "Status of the protection, in a group of interfaces 
           configured in a protection mode.";
      }

			uses protection-external-commands;
    }
  }
}
